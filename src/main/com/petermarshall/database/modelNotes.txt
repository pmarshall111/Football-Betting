We will have 4 separate tables - league, team, match, player.

We should store the data in the database as raw data, which we can then calculate training data from.

Schemas:

League - _id, name
Team - _id, name, league
Match - _id, hometeam, awayteam, xG stats, betting odds for that match

Then for player stats within a match, we'll need a way to store an object within SQL. Hopefully there is a serialize method.


What queries do we want to execute?

(limit to seasons?)
- We want all matches from a league
- All teams from a league.

Then we calc our training data using exponentially weighted averages and %win/loss/draw that the betting odds think. Alter these so that the correct result is 5% higher than original.
So the actual results are more heavily weighted than they are in the betting odds which will hopefully help us to predict correct results, or see when a bet is good value.


_________

-Current thoughts:

Which methods do we need public?

- Obviously new league, for when we initialise all our data.
- We probably need the add season one, for when we get a new year to add.

- Need an update method for match.
- Need an insert player ratings method.

- Need a get all completed matches of season method for when we want to make our training data.
- Need a method to give the date of the most recent completed match so that when we next scrape we know that we're only interested in matches after that date.
- Need a method to get the times of all games that will be played today so that we can scrape 45 mins before to get the betting odds and lineups and see if it's a good bet.

These will probably need to be different methods to the ones we are currently using as the caller won't have any idea what the ids
of the other tables we want to link will be. Probably will have a public method that finds all the info needed from the database and then
calls our private method once we have all the data we need.


_________

- Potential problem with DataSource. Maybe some Dates will be SQL dates rather than util.Date, as that's what was by default loaded in. Unsure if will cause a problem.